varying vec4 TexCoordsAlphaLife;

uniform sampler2D texLifeAndSourcePosOUT, particleTexture, normalTexture, uDepthMap;
uniform sampler2D internalTex3;
uniform float graphSampleSize;
uniform float graphNumSamples;
uniform vec4 screenSize;
uniform float camera_far;
uniform float softening;
uniform float colorMult;

vec4 tex1Dlod_lerp(sampler2D tex, vec2 tc)
{
    return mix( texture2D(tex,tc), texture2D(tex,tc + graphSampleSize), fract(tc.x*graphNumSamples) );
}

float saturate(float x)
{
    return clamp(x, 0.0, 1.0);
}

float unpackFloat(vec4 rgbaDepth)
{
    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);
    float depth = dot(rgbaDepth, bitShift);
    return depth;
}

void main(void)
{
    vec4 tex         = texture2D(particleTexture, TexCoordsAlphaLife.xy);
    float alphaDivergence = TexCoordsAlphaLife.z;
    vec4 ramp     = tex1Dlod_lerp(internalTex3, vec2(TexCoordsAlphaLife.w + alphaDivergence, 0.0));
    ramp *= colorMult;

    vec3 rgb =     tex.rgb * ramp.rgb;

    float a =         tex.a * ramp.a;

