
// Compiler should remove unneeded stuff
uniform vec3 view_position;

uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_specularMap;
uniform sampler2D texture_glossMap;
uniform sampler2D texture_emissiveMap;
uniform sampler2D texture_lightMap;
uniform sampler2D texture_normalMap;
uniform sampler2D texture_heightMap;
uniform sampler2D texture_sphereMap;
uniform samplerCube texture_cubeMap;
uniform sampler2D texture_opacityMap;
uniform vec3 material_ambient;
uniform vec3 material_diffuse;
uniform vec3 material_specular;
uniform float material_shininess;
uniform vec3 material_emissive;
uniform float material_bumpMapFactor;
uniform float material_reflectionFactor;
uniform float material_opacity;
uniform vec3 light_globalAmbient;

varying vec3 vPositionW;
varying vec3 vNormalW;
varying vec3 vTangentW;
varying vec3 vBinormalW;
varying vec2 vUvLayer0;
varying vec2 vUvLayer1;
varying vec2 vUvLayer2;
varying vec2 vUv1;
varying vec4 vVertexColor;
varying vec3 vNormalV;

struct psInternalData {
    vec3 albedo;
    vec3 specularity;
    float glossiness;
    vec3 emission;
    vec3 normalW;
    mat3 TBN;
    vec3 viewDirW;
    vec3 reflDirW;
    vec3 diffuseLight;
    vec3 specularLight;
    float alpha;
    vec3 lightDirNormW;
    vec3 lightDirW;
    float atten;
    vec3 shadowCoord;
    vec2 uvLayer0;
    vec2 uvLayer1;
    vec2 uvLayer2;
};

void getViewDir(inout psInternalData data) {
    data.viewDirW = normalize(view_position - vPositionW);
}

void getReflDir(inout psInternalData data) {
    data.reflDirW = -reflect(data.viewDirW, data.normalW);
}

void addAmbientConstant(inout psInternalData data) {
    data.diffuseLight += light_globalAmbient;
}

void getLightDirPoint(inout psInternalData data, vec3 lightPosW) {
    data.lightDirW = vPositionW - lightPosW;
    data.lightDirNormW = normalize(data.lightDirW);
}

float getFalloffLinear(inout psInternalData data, float lightRadius) {
    float d = length(data.lightDirW);
    return max(((lightRadius - d) / lightRadius), 0.0);
}

float getFalloffInvSquared(inout psInternalData data) {
    float sqrDist = dot(data.lightDirW, data.lightDirW);
    return 1.0 / sqrDist;
}

float getSpotEffect(inout psInternalData data, vec3 lightSpotDirW, float lightInnerConeAngle, float lightOuterConeAngle) {
    float cosAngle = dot(data.lightDirNormW, lightSpotDirW);
    return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);
}

